name: Docker Build and Push

on:
  push:
    branches: [main, master, develop]
    tags: ['v*']
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    name: Build Backend Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  test-container:
    name: Test Container
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event_name != 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: vibe_arcade
          POSTGRES_USER: vibe_arcade
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test container functionality
      run: |
        # Get the first tag from the multi-line output
        IMAGE_TAG=$(echo "${{ needs.build-backend.outputs.image-tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"

        # Run the container
        docker run -d \
          --name test-backend \
          --network host \
          -e DB_HOST=localhost \
          -e DB_PORT=5432 \
          -e DB_USER=vibe_arcade \
          -e DB_PASSWORD=test_password \
          -e DB_NAME=vibe_arcade \
          -e REDIS_HOST=localhost \
          -e REDIS_PORT=6379 \
          -e JWT_SECRET=test-secret \
          -e SERVER_PORT=8181 \
          "$IMAGE_TAG"

        # Wait for the service to be ready
        echo "Waiting for backend to start..."
        timeout 60 bash -c 'until curl -f http://localhost:8181/health; do sleep 2; done'

        # Run basic API tests
        echo "Running basic API tests..."
        curl -X POST http://localhost:8181/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","username":"testuser","password":"password123"}' \
          || echo "Registration test completed"

        # Check container logs
        echo "Container logs:"
        docker logs test-backend

        # Stop container
        docker stop test-backend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event_name != 'pull_request'

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        args: --severity-threshold=high

  build-dev-environment:
    name: Build Development Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build development docker-compose
      run: |
        cd backend
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml push

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build-backend, test-container]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install performance testing tools
      run: |
        # Install wrk for load testing
        sudo apt-get update
        sudo apt-get install -y wrk

    - name: Start services for performance testing
      run: |
        # Start database services
        docker run -d --name perf-postgres \
          -e POSTGRES_DB=vibe_arcade \
          -e POSTGRES_USER=vibe_arcade \
          -e POSTGRES_PASSWORD=test_password \
          -p 5432:5432 \
          postgres:15

        docker run -d --name perf-redis \
          -p 6379:6379 \
          redis:7-alpine

        # Wait for databases to be ready
        sleep 10

        # Start backend
        IMAGE_TAG=$(echo "${{ needs.build-backend.outputs.image-tags }}" | head -n1)
        docker run -d --name perf-backend \
          --network host \
          -e DB_HOST=localhost \
          -e DB_PORT=5432 \
          -e DB_USER=vibe_arcade \
          -e DB_PASSWORD=test_password \
          -e DB_NAME=vibe_arcade \
          -e REDIS_HOST=localhost \
          -e REDIS_PORT=6379 \
          -e JWT_SECRET=test-secret \
          -e SERVER_PORT=8181 \
          "$IMAGE_TAG"

        # Wait for backend to start
        timeout 60 bash -c 'until curl -f http://localhost:8181/health; do sleep 2; done'

    - name: Run performance tests
      run: |
        echo "Running performance tests..."

        # Test health endpoint performance
        wrk -t12 -c400 -d30s --latency http://localhost:8181/health

        # Test API endpoint performance (if authentication allows)
        echo "Performance test completed"

    - name: Cleanup performance test containers
      if: always()
      run: |
        docker stop perf-backend perf-postgres perf-redis || true
        docker rm perf-backend perf-postgres perf-redis || true

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [test-container, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ env.IMAGE_NAME }}/backend
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true